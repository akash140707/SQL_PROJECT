#!/usr/bin/env python
# coding: utf-8

# In[1]:


import pandas as pd
import matplotlib as plt
import seaborn as sns
import mysql.connector
import numpy as np

db = mysql.connector.connect(host = 'localhost',
                            username = 'root',
                            password = 'Akash@2308',
                            database = 'ecommerce')

cur = db.cursor()


# # Que 1- List all unique cities where customers are located.

# In[2]:


query = """select distinct customer_city from customers"""

cur.execute(query)

data = cur.fetchall()

df = pd.DataFrame(data,columns = ["Customer city"])

df


# # Que 2- Count the number of orders placed in 2017.

# In[3]:


query = """select count(order_id) from orders where year(order_purchase_timestamp) = 2017"""

cur.execute(query)

data = cur.fetchall()

"Total order plased in 2017", data


# # Que 3 - Find the total sales per category.

# In[4]:


query = """select upper(products.product_category) category,
round(sum(payments.payment_value),2) sales
from products join order_items
on products.product_id = order_items.product_id
join payments
on payments.order_id = order_items.order_id
group by category
"""

cur.execute(query)

data = cur.fetchall()

df = pd.DataFrame(data, columns = ["category" ,"sales"] )

df


# # Que - 4 Calculate the percentage of orders that were paid in installments.

# In[5]:


query = """select (sum(case when payment_installments >= 1 then 1
else 0 end))/count(*)*100 from payments """

cur.execute(query)

data = cur.fetchall()

"the percentage of orders that were paid in installments is ",data[0][0]


# # Que - 5 Count the number of customers from each state.

# In[6]:


query = """select customer_state, count(customer_id) 
from customers group by customer_state"""

cur.execute(query)

data = cur.fetchall()

df = pd.DataFrame(data, columns = ["state", "customer_count"])

df = df.sort_values(by = "customer_count", ascending = False)

s = sns.barplot(x = df["state"], y = df["customer_count"])
s.set_xticklabels(s.get_xticklabels(), rotation=90);


# # Que - 6 Calculate the number of orders per month in 2018.

# In[7]:


query = """select monthname(order_purchase_timestamp) month, count(order_id) order_count
from orders where year(order_purchase_timestamp) = 2018
group by month"""

cur.execute(query)

data = cur.fetchall()

df = pd.DataFrame(data, columns = ["Month","Order_count"])

o = ["January","February","March","April","May","June","July","August","September","October"]

ax = sns.barplot(x = df["Month"], y = df["Order_count"], data = df, order = o)
#plt.xticks(rotation = 45)

ax.bar_label(ax.containers[0])

ax.set_xticklabels(ax.get_xticklabels(), rotation= 45);




# # Que - 7 Find the average number of products per order, grouped by customer city.
# 

# In[8]:


query = """with count_per_order as 
(select orders.order_id, orders.customer_id, count(order_items.order_id) as oc
from orders join order_items
on orders.order_id =  order_items.order_id
group by orders.order_id, orders.customer_id)


select customers.customer_city, round(avg(count_per_order.oc),2) average_orders
from customers join count_per_order
on customers.customer_id = count_per_order.customer_id
group by customers.customer_city order by average_orders desc;
"""

cur.execute(query)

data = cur.fetchall()

df = pd.DataFrame(data , columns =["customer_city","average_products/order"])


df.head(10)


# # Que - 8 Calculate the percentage of total revenue contributed by each product category.

# In[9]:


query = """select upper(products.product_category) category,
round((sum(payments.payment_value)/(select sum(payment_value) from payments))*100,2) sales_percentage
from products join order_items
on products.product_id = order_items.product_id
join payments
on payments.order_id = order_items.order_id
group by category order by sales_percentage  desc;
"""

cur.execute(query)

data = cur.fetchall()

df = pd.DataFrame(data , columns =["category","percentage_distribution"])


df


# # Que - 9 Identify the correlation between product price and the number of times a product has been purchased.

# In[10]:


query = """select products.product_category,
count(order_items.product_id),
round(avg(order_items.price),2)
from products join order_items
on products.product_id = order_items.product_id
group by products.product_category;
"""

cur.execute(query)

data = cur.fetchall()

df = pd.DataFrame(data , columns =["category","order_count","price"])


arr1 = df["order_count"]
arr2 = df["price"]

a = np.corrcoef([arr1,arr2])
print("The corelation is ", a [0][-1])


# # Que - 10 Calculate the total revenue generated by each seller, and rank them by revenue.

# In[11]:


query = """select *, dense_rank() over(order by revenue desc) as rn from 
(select order_items.seller_id, sum(payments.payment_value) revenue
from order_items join payments
on order_items.order_id = payments.order_id
group by order_items.seller_id) as a
"""

cur.execute(query)

data = cur.fetchall()

df = pd.DataFrame(data , columns =["seller_id","revenue","rank"])
df = df.head()
ax =sns.barplot(x = "seller_id", y = "revenue", data = df)
ax.set_xticklabels(ax.get_xticklabels(), rotation= 90);


# # Que - 11 Calculate the moving average of order values for each customer over their order history.

# In[12]:


query = """select customer_id, order_purchase_timestamp, payment,
 avg(payment) over(partition by customer_id order by order_purchase_timestamp
 rows between 2 preceding and current row) as mov_avg
 from 
 (select orders.customer_id, orders.order_purchase_timestamp,
 payments.payment_value as payment
 from payments join orders
 on payments.order_id = orders.order_id) as a;
"""

cur.execute(query)

data = cur.fetchall()

df = pd.DataFrame(data , columns =["customer_id","order_purchase_timestamp","payment","mov_avg"])

df


# #  Que - 12 Calculate the cumulative sales per month for each year.

# In[13]:


query = """select years , months , payment , sum(payment)
over(order by years , months) cumulative_sales from 
(select year(orders.order_purchase_timestamp) as years,
month(orders.order_purchase_timestamp) as months,
round(sum(payments.payment_value),2) as payment from orders join payments
on orders.order_id = payments.order_id
group by years , months order by years , months) as a;;
"""

cur.execute(query)

data = cur.fetchall()

df = pd.DataFrame(data , columns =["years","months","payment","cumulative_sales"])

df


# #  Que - 13 Calculate the year-over-year growth rate of total sales.

# In[14]:


query = """with a as (select year(orders.order_purchase_timestamp) as years,
round(sum(payments.payment_value),2) as payment from orders join payments
on orders.order_id = payments.order_id
group by years order by years)

select years , ((payment - lag(payment,1) over(order by years))/lag(payment,1) over(order by years))*100  from a;
"""

cur.execute(query)

data = cur.fetchall()

df = pd.DataFrame(data, columns = ["years","yoy % groth"])

df


# # Que - 14 Calculate the retention rate of customers, defined as the percentage of customers who make another purchase within 6 months of their first purchase.

# In[15]:


query = """with a as (select customers.customer_id, 
min(orders.order_purchase_timestamp) first_order
FROM customers JOIN orders
ON customers.customer_id = orders.customer_id
group by customers.customer_id),

b as (select a.customer_id, count(distinct orders.order_purchase_timestamp) next_order
from a join orders
on orders.customer_id = a.customer_id
and orders.order_purchase_timestamp > first_order
and orders.order_purchase_timestamp < date_add(first_order , interval 6 month)
group by a.customer_id)

select 100 * (count(distinct a.customer_id )/ count(distinct b.customer_id ))
from a left join b
on a.customer_id = b.customer_id;
"""

cur.execute(query)

data = cur.fetchall()

"There is no record in datadase so that result fond ",data


# # Que - 15 Identify the top 3 customers who spent the most money in each year.
# 

# In[16]:


query = """select years, customer_id,payment, d_rank
from
(select year(orders.order_purchase_timestamp) years,
orders.customer_id,
sum(payments.payment_value) payment,
dense_rank() over(partition by year(order_purchase_timestamp)
order by sum(payments.payment_value) desc) d_rank
from orders join payments
on payments.order_id = orders.order_id
group by year(orders.order_purchase_timestamp),
orders.customer_id) as a
where d_rank <= 3;

"""

cur.execute(query)

data = cur.fetchall()

df = pd.DataFrame(data, columns = ["year","id","payment","d_rank"])

ax = sns.barplot(x = "id", y = "payment", data = df, hue = "year")
ax.set_xticklabels(ax.get_xticklabels(), rotation= 90);


# In[ ]:





# In[ ]:




